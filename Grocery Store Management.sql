create database ppt1;
use ppt1;

-- 1. Supplier Table
CREATE TABLE IF NOT EXISTS supplier (
    sup_id TINYINT PRIMARY KEY,
    sup_name VARCHAR(255),
    address TEXT
);

select *from supplier;

-- 2. Categories Table
CREATE TABLE IF NOT EXISTS categories (
    cat_id TINYINT PRIMARY KEY,
    cat_name VARCHAR(255)
);

select *from categories;


-- 3. Employees Table
CREATE TABLE IF NOT EXISTS employees (
    emp_id TINYINT PRIMARY KEY,
    emp_name VARCHAR(255),
    hire_date VARCHAR(255)
);

select *from employees;

-- 4. Customers Table
CREATE TABLE IF NOT EXISTS customers (
    cust_id SMALLINT PRIMARY KEY,
    cust_name VARCHAR(255),
    address TEXT
);

select *from customers;

-- 5. Products Table
CREATE TABLE IF NOT EXISTS products (
    prod_id TINYINT PRIMARY KEY,
    prod_name VARCHAR(255),
    sup_id TINYINT,
    cat_id TINYINT,
    price DECIMAL(10,2),
    FOREIGN KEY (sup_id) REFERENCES supplier(sup_id)
        ON UPDATE CASCADE ON DELETE CASCADE,
    FOREIGN KEY (cat_id) REFERENCES categories(cat_id)
        ON UPDATE CASCADE ON DELETE CASCADE
);

select *from products;

-- 6. Orders Table
CREATE TABLE IF NOT EXISTS orders (
    ord_id SMALLINT PRIMARY KEY,
    cust_id SMALLINT,
    emp_id TINYINT,
    order_date VARCHAR(255),
    FOREIGN KEY (cust_id) REFERENCES customers(cust_id)
        ON UPDATE CASCADE ON DELETE CASCADE,
    FOREIGN KEY (emp_id) REFERENCES employees(emp_id)
        ON UPDATE CASCADE ON DELETE CASCADE
);


select *from orders;

-- 7. Order_Details Table
CREATE TABLE IF NOT EXISTS order_details (
    ord_detID SMALLINT AUTO_INCREMENT PRIMARY KEY,
    ord_id SMALLINT,
    prod_id TINYINT,
    quantity TINYINT,
    each_price DECIMAL(10,2),
    total_price DECIMAL(10,2),
    FOREIGN KEY (ord_id) REFERENCES orders(ord_id)
        ON UPDATE CASCADE ON DELETE CASCADE,
    FOREIGN KEY (prod_id) REFERENCES products(prod_id)
        ON UPDATE CASCADE ON DELETE CASCADE
);

select *from order_details;

-- 1. Customer Insights

-- a)How many unique customers have placed orders?
SELECT COUNT(DISTINCT cust_id) AS UniqueCustomerCount
FROM Orders;

-- b)Which customers have placed the highest number of orders?
SELECT cust_id, COUNT(*) AS OrderCount
FROM Orders
GROUP BY cust_id
ORDER BY OrderCount DESC
LIMIT 1;

-- c)What is the total and average purchase value per customer?
SELECT 
    o.cust_id,
    SUM(od.total_price) AS TotalPurchaseValue,
    AVG(od.total_price) AS AveragePurchaseValue
FROM orders o
JOIN order_details od ON o.ord_id = od.ord_id
GROUP BY o.cust_id;

-- d)Who are the top 5 customers by total purchase amount?
SELECT 
    o.cust_id,
    SUM(od.total_price) AS TotalPurchaseAmount
FROM orders o
JOIN order_details od ON o.ord_id = od.ord_id
GROUP BY o.cust_id
ORDER BY TotalPurchaseAmount DESC
LIMIT 5;

-- 2. Product Performance
-- a)How many products exist in each category?
SELECT 
    c.cat_id,
    c.cat_name,
    COUNT(p.prod_id) AS ProductCount
FROM categories c
LEFT JOIN products p ON c.cat_id = p.cat_id
GROUP BY c.cat_id, c.cat_name;

-- b)What is the average price of products by category?
SELECT 
    c.cat_id,
    c.cat_name,
    AVG(p.price) AS AveragePrice
FROM categories c
JOIN products p ON c.cat_id = p.cat_id
GROUP BY c.cat_id, c.cat_name;

-- c)Which products have the highest total sales volume (by quantity)?
SELECT 
    p.prod_id,
    p.prod_name,
    SUM(od.quantity) AS TotalQuantitySold
FROM products p
JOIN order_details od ON p.prod_id = od.prod_id
GROUP BY p.prod_id, p.prod_name
ORDER BY TotalQuantitySold DESC
LIMIT 1;

-- d)What is the total revenue generated by each product?
SELECT 
    p.prod_id,
    p.prod_name,
    SUM(od.total_price) AS TotalRevenue
FROM products p
JOIN order_details od ON p.prod_id = od.prod_id
GROUP BY p.prod_id, p.prod_name
ORDER BY TotalRevenue DESC;

-- e)How do product sales vary by category and supplier?
SELECT 
    c.cat_id,
    c.cat_name,
    s.sup_id,
    s.sup_name,
    SUM(od.quantity) AS TotalQuantitySold,
    SUM(od.total_price) AS TotalRevenue
FROM order_details od
JOIN products p ON od.prod_id = p.prod_id
JOIN categories c ON p.cat_id = c.cat_id
JOIN supplier s ON p.sup_id = s.sup_id
GROUP BY c.cat_id, c.cat_name, s.sup_id, s.sup_name
ORDER BY c.cat_id, TotalRevenue DESC;

-- 3. Sales and Order Trends

-- a).How many orders have been placed in total?
SELECT COUNT(*) AS total_orders
FROM orders;

-- b)What is the average value per order?
SELECT AVG(total_orders) AS avg_order_value
FROM (
    SELECT ord_id, SUM(total_price) AS total_orders
    FROM order_details
    GROUP BY ord_id
) t;

-- c)On which dates were the most orders placed?
SELECT order_date, COUNT(*) AS total_orders
FROM orders
GROUP BY order_date
HAVING COUNT(*) = (
    SELECT MAX(order_count)
    FROM (
        SELECT COUNT(*) AS order_count
        FROM orders
        GROUP BY order_date
    ) t
);

-- d)What are the monthly trends in order volume and revenue?
SELECT 
    DATE_FORMAT(STR_TO_DATE(order_date, '%Y-%m-%d'), '%Y-%m') AS month, 
    COUNT(DISTINCT o.ord_id) AS total_orders,
    SUM(od.total_price) AS total_revenue
FROM orders o
JOIN order_details od ON o.ord_id = od.ord_id
GROUP BY DATE_FORMAT(STR_TO_DATE(order_date, '%Y-%m-%d'), '%Y-%m')
ORDER BY month;

-- e)How do order patterns vary across weekdays and weekends?
SELECT 
    CASE 
        WHEN DAYOFWEEK(STR_TO_DATE(order_date, '%Y-%m-%d')) IN (1,7) THEN 'Weekend'
        ELSE 'Weekday'
    END AS day_type,
    COUNT(DISTINCT o.ord_id) AS total_orders,
    SUM(od.total_price) AS total_revenue
FROM orders o
JOIN order_details od ON o.ord_id = od.ord_id
GROUP BY day_type;

-- 4️. Supplier Contribution
-- a)How many suppliers are there in the database?
SELECT COUNT(*) AS total_suppliers
FROM supplier;

-- b)Which supplier provides the most products?
SELECT 
    p.sup_id,
    s.sup_name,
    COUNT(p.prod_id) AS product_count
FROM products p
JOIN supplier s ON p.sup_id = s.sup_id
GROUP BY p.sup_id, s.sup_name
ORDER BY product_count DESC
LIMIT 1;

-- c)What is the average price of products from each supplier?
SELECT 
    s.sup_id,
    s.sup_name,
    AVG(p.price) AS avg_product_price
FROM products p
JOIN supplier s ON p.sup_id = s.sup_id
GROUP BY s.sup_id, s.sup_name
ORDER BY avg_product_price DESC;

-- d)Which suppliers contribute the most to total product sales (by revenue)?
SELECT 
    s.sup_id,
    s.sup_name,
    SUM(od.total_price) AS total_revenue
FROM supplier s
JOIN products p ON s.sup_id = p.sup_id
JOIN order_details od ON p.prod_id = od.prod_id
GROUP BY s.sup_id, s.sup_name
ORDER BY total_revenue DESC;

-- 5️. Employee Performance

-- a)How many employees have processed orders?
SELECT COUNT(DISTINCT emp_id) AS employees_with_orders
FROM orders;

-- b)Which employees have handled the most orders?
SELECT 
    e.emp_id,
    e.emp_name,
    COUNT(o.ord_id) AS total_orders
FROM employees e
JOIN orders o ON e.emp_id = o.emp_id
GROUP BY e.emp_id, e.emp_name
ORDER BY total_orders DESC;

-- c)What is the total sales value processed by each employee?
SELECT 
    e.emp_id,
    e.emp_name,
    SUM(od.total_price) AS total_sales
FROM employees e
JOIN orders o ON e.emp_id = o.emp_id
JOIN order_details od ON o.ord_id = od.ord_id
GROUP BY e.emp_id, e.emp_name
ORDER BY total_sales DESC;

-- d)What is the average order value handled per employee?
SELECT 
    e.emp_id,
    e.emp_name,
    ROUND(SUM(od.total_price) / COUNT(DISTINCT o.ord_id), 2) AS avg_order_value
FROM employees e
JOIN orders o ON e.emp_id = o.emp_id
JOIN order_details od ON o.ord_id = od.ord_id
GROUP BY e.emp_id, e.emp_name
ORDER BY avg_order_value DESC;

-- 6️. Order Details Deep Dive
-- a)What is the relationship between quantity ordered and total price?
SELECT quantity, AVG(total_price) AS avg_total_price
FROM order_details
GROUP BY quantity
ORDER BY quantity;

-- b)What is the average quantity ordered per product?
SELECT 
    p.prod_id,
    p.prod_name,
    AVG(od.quantity) AS avg_quantity_ordered
FROM order_details od
JOIN products p ON od.prod_id = p.prod_id
GROUP BY p.prod_id, p.prod_name
ORDER BY avg_quantity_ordered DESC;

-- c)How does the unit price vary across products and orders?
SELECT 
    p.prod_id,
    p.prod_name,
    MIN(od.each_price) AS min_price,
    MAX(od.each_price) AS max_price,
    ROUND(AVG(od.each_price), 2) AS avg_price
FROM order_details od
JOIN products p ON od.prod_id = p.prod_id
GROUP BY p.prod_id, p.prod_name
ORDER BY avg_price DESC;

SELECT 
    od.ord_id,
    COUNT(DISTINCT od.prod_id) AS products_count,
    MIN(od.each_price) AS min_price_in_order,
    MAX(od.each_price) AS max_price_in_order,
    ROUND(AVG(od.each_price), 2) AS avg_price_in_order
FROM order_details od
GROUP BY od.ord_id
ORDER BY avg_price_in_order DESC;


































